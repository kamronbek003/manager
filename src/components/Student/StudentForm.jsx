import React, {
    useState,
    useMemo,
    useCallback,
    useEffect,
    useRef,
} from "react";
import {
    ChevronDown,
    X,
    CheckCircle,
    User,
    Phone,
    Home,
    Calendar,
    School,
    Globe,
    Percent,
    FileText,
    CheckSquare,
} from "lucide-react";
import { parseDDMMYYYY, formatDDMMYYYY } from "../../utils/helpers";
import { apiRequest } from "../../utils/api";
import ErrorMessage from "../Essential/ErrorMessage";
import LoadingSpinner from "../Essential/LoadingSpinner";

const getSafeKey = (item, index) =>
    `${typeof item === "string" ? item : JSON.stringify(item)}-${index}`;

const generateNextStudentId = (lastId) => {
    if (!lastId || typeof lastId !== "string" || !lastId.startsWith("N"))
        return null;
    const numPartStr = lastId.substring(1);
    if (numPartStr.length === 0) return null;
    const numPart = parseInt(numPartStr, 10);
    if (isNaN(numPart)) return null;
    return `N${numPart + 1}`;
};

const calculateLessonsInMonth = (darsJadvali, whenCome) => {
    if (!darsJadvali || !whenCome) return 0;
    const days = darsJadvali.split(",").map((day) => day.trim().toLowerCase());
    const startDate = new Date(whenCome);
    if (isNaN(startDate.getTime())) return 0;

    const year = startDate.getFullYear();
    const month = startDate.getMonth();
    const startDay = startDate.getDate();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    let lessonCount = 0;

    for (let day = startDay; day <= daysInMonth; day++) {
        const date = new Date(year, month, day);
        const dayName = date
            .toLocaleString("en-US", { weekday: "long" })
            .toLowerCase();
        if (
            (days.includes("dush") && dayName === "monday") ||
            (days.includes("sesh") && dayName === "tuesday") ||
            (days.includes("chor") && dayName === "wednesday") ||
            (days.includes("pays") && dayName === "thursday") ||
            (days.includes("jum") && dayName === "friday") ||
            (days.includes("shan") && dayName === "saturday") ||
            (days.includes("yak") && dayName === "sunday")
        ) {
            lessonCount++;
        }
    }
    return lessonCount;
};

const isValidPhoneNumber = (phone) => {
    return /^\+998\d{9}$/.test(phone);
};

const isValidUUID = (id) => {
    return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
        id
    );
};

// Format date to DD-MM-YYYY
const formatDateToDDMMYYYY = (dateInput) => {
    if (!dateInput) return "";
    try {
        const date = new Date(dateInput);
        if (isNaN(date.getTime())) return "";
        const day = date.getUTCDate().toString().padStart(2, "0");
        const month = (date.getUTCMonth() + 1).toString().padStart(2, "0");
        const year = date.getUTCFullYear();
        return `${day}-${month}-${year}`;
    } catch {
        return "";
    }
};

const formatDateToYYYYMMDD = (dateInput) => {
    if (!dateInput) return "";
    try {
        const date = new Date(dateInput);
        if (isNaN(date.getTime())) return "";
        const year = date.getUTCFullYear();
        const month = (date.getUTCMonth() + 1).toString().padStart(2, "0");
        const day = date.getUTCDate().toString().padStart(2, "0");
        return `${year}-${month}-${day}`;
    } catch {
        return "";
    }
};

const StudentForm = ({
    token,
    initialData,
    groups,
    onFormSubmit,
    onCancel,
    lastStudentId,
    showToast,
}) => {
    const defaultNewFormState = {
        studentId: "",
        firstName: "",
        lastName: "",
        phone: "",
        address: "",
        dateBirth: "",
        parentPhone: "",
        selectedGroupIds: [],
        status: "FAOL",
        hasFamilyMembers: false,
        discountPercentage: "",
        whichSchool: "",
        howFind: "",
        ball: "",
        whenCome: "",
        firstPaymentNote: "",
        whyStop: "",
    };

    const [formData, setFormData] = useState(defaultNewFormState);
    const [loading, setLoading] = useState(false);
    const [formError, setFormError] = useState(null);
    const [isGroupDropdownOpen, setIsGroupDropdownOpen] = useState(false);
    const [isIdAutoGenerated, setIsAutoGenerated] = useState(false);

    const groupDropdownRef = useRef(null);
    const isEditing = useMemo(() => !!initialData?.id, [initialData]);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (
                groupDropdownRef.current &&
                !groupDropdownRef.current.contains(event.target)
            ) {
                setIsGroupDropdownOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () =>
            document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    useEffect(() => {
        if (isEditing && initialData) {
            setFormData({
                studentId: initialData.studentId || "",
                firstName: initialData.firstName || "",
                lastName: initialData.lastName || "",
                phone: initialData.phone || "",
                address: initialData.address || "",
                dateBirth: initialData.dateBirth
                    ? formatDateToYYYYMMDD(initialData.dateBirth)
                    : "",
                parentPhone: initialData.parentPhone || "",
                selectedGroupIds:
                    initialData.groups
                        ?.map((g) => g.id)
                        .filter((id) => id && isValidUUID(id)) || [],
                status: initialData.status || "FAOL",
                hasFamilyMembers: initialData.hasFamilyMembers || false,
                discountPercentage:
                    initialData.discount ??
                    initialData.discountPercentage ??
                    "",
                whichSchool: initialData.whichSchool || "",
                howFind: initialData.howFind || "",
                ball: initialData.ball ?? "",
                whenCome: initialData.whenCome
                    ? formatDateToYYYYMMDD(initialData.whenCome)
                    : "",
                firstPaymentNote: initialData.firstPaymentNote || "",
                whyStop: initialData.whyStop || "",
            });
            setIsAutoGenerated(false);
        } else {
            const nextId = generateNextStudentId(lastStudentId);
            setFormData({
                ...defaultNewFormState,
                studentId: nextId || "",
            });
            setIsAutoGenerated(!!nextId);
        }
    }, [isEditing, initialData, lastStudentId]);

    const paymentDetails = useMemo(() => {
        if (!groups || groups.length === 0 || !formData.whenCome) {
            return {
                groupDetails: [],
                totalOriginalPrice: 0,
                totalProportionalPrice: 0,
                discountAmount: 0,
                finalMonthlyPayment: 0,
                totalLessons: 0,
            };
        }

        const monthlyLessons = 12;

        const groupDetails = formData.selectedGroupIds.map((groupId) => {
            const group = groups.find((g) => g.id === groupId);
            const lessons = group?.darsJadvali
                ? calculateLessonsInMonth(group.darsJadvali, formData.whenCome)
                : 0;
            const coursePrice = group?.coursePrice || 0;
            const proportionalPrice = coursePrice * (lessons / monthlyLessons);
            const discountPercent =
                parseFloat(String(formData.discountPercentage)) || 0;
            const groupDiscountAmount =
                proportionalPrice * (discountPercent / 100);
            const groupFinalPrice = proportionalPrice - groupDiscountAmount;

            return {
                groupId,
                groupName: group?.name || group?.groupId || `ID: ${groupId}`,
                lessons,
                coursePrice,
                proportionalPrice: Math.round(proportionalPrice),
                groupDiscountAmount: Math.round(groupDiscountAmount),
                groupFinalPrice: Math.round(groupFinalPrice),
            };
        });

        const totalOriginalPrice = groupDetails.reduce(
            (sum, detail) => sum + detail.coursePrice,
            0
        );
        const totalProportionalPrice = groupDetails.reduce(
            (sum, detail) => sum + detail.proportionalPrice,
            0
        );
        const totalLessons = groupDetails.reduce(
            (sum, detail) => sum + detail.lessons,
            0
        );
        const discountAmount = groupDetails.reduce(
            (sum, detail) => sum + detail.groupDiscountAmount,
            0
        );
        const finalMonthlyPayment = groupDetails.reduce(
            (sum, detail) => sum + detail.groupFinalPrice,
            0
        );

        return {
            groupDetails,
            totalOriginalPrice: Math.round(totalOriginalPrice),
            totalProportionalPrice: Math.round(totalProportionalPrice),
            discountAmount: Math.round(discountAmount),
            finalMonthlyPayment: Math.round(finalMonthlyPayment),
            totalLessons,
        };
    }, [
        formData.selectedGroupIds,
        formData.discountPercentage,
        formData.whenCome,
        groups,
    ]);

    const handleChange = useCallback((e) => {
        const { name, value, type, checked } = e.target;
        if (type === "checkbox") {
            setFormData((prev) => ({ ...prev, [name]: checked }));
        } else if (name === "discountPercentage" || name === "ball") {
            if (value === "") {
                setFormData((prev) => ({ ...prev, [name]: "" }));
            } else {
                let numValue = parseInt(value, 10);
                if (!isNaN(numValue)) {
                    if (name === "discountPercentage" && numValue < 0)
                        numValue = 0;
                    if (name === "discountPercentage" && numValue > 100)
                        numValue = 100;
                    if (name === "ball" && numValue < 0) numValue = 0;
                    setFormData((prev) => ({ ...prev, [name]: numValue }));
                }
            }
        } else {
            setFormData((prev) => ({ ...prev, [name]: value }));
        }
    }, []);

    const handleGroupToggle = useCallback(
        (groupId) => {
            if (!isValidUUID(groupId)) {
                showToast?.(
                    "Noto‘g‘ri guruh ID formati.",
                    "error",
                    4000,
                    "top-right"
                );
                return;
            }
            setFormData((prev) => {
                const newSelectedGroupIds = prev.selectedGroupIds.includes(
                    groupId
                )
                    ? prev.selectedGroupIds.filter((id) => id !== groupId)
                    : [...prev.selectedGroupIds, groupId];
                return { ...prev, selectedGroupIds: newSelectedGroupIds };
            });
        },
        [showToast]
    );

    const handleSubmit = useCallback(
        async (e) => {
            e.preventDefault();
            setFormError(null);
            setLoading(true);
            setIsGroupDropdownOpen(false);

            if (!formData.studentId && !isIdAutoGenerated) {
                const errorMsg = "Student ID kiritilishi shart.";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (
                !formData.firstName ||
                !formData.lastName ||
                !formData.phone ||
                !formData.address ||
                !formData.parentPhone ||
                !formData.dateBirth
            ) {
                const errorMsg =
                    "Iltimos, barcha majburiy maydonlarni to'ldiring.";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (!/^\d{4}-\d{2}-\d{2}$/.test(formData.dateBirth)) {
                const errorMsg =
                    "Tug'ilgan sana formati noto'g'ri (YYYY-MM-DD).";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            const parsedDateBirth = new Date(formData.dateBirth);
            if (isNaN(parsedDateBirth.getTime())) {
                const errorMsg = "Tug'ilgan sana noto'g'ri.";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (!isValidPhoneNumber(formData.phone)) {
                const errorMsg =
                    "Telefon raqami O'zbekiston formatiga mos kelishi kerak (+998xxxxxxxxx).";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (!isValidPhoneNumber(formData.parentPhone)) {
                const errorMsg =
                    "Ota-ona telefon raqami O'zbekiston formatiga mos kelishi kerak (+998xxxxxxxxx).";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (
                formData.whenCome &&
                !/^\d{4}-\d{2}-\d{2}$/.test(formData.whenCome)
            ) {
                const errorMsg =
                    "Qachon kelgan sana formati noto'g'ri (YYYY-MM-DD).";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            const parsedWhenCome = formData.whenCome
                ? new Date(formData.whenCome)
                : null;
            if (formData.whenCome && isNaN(parsedWhenCome.getTime())) {
                const errorMsg = "Qachon kelgan sana noto'g'ri.";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }
            if (formData.selectedGroupIds.some((id) => !isValidUUID(id))) {
                const errorMsg =
                    "Guruh IDlaridan biri noto'g'ri UUID formatida.";
                setFormError(errorMsg);
                showToast?.(errorMsg, "error", 4000, "top-right");
                setLoading(false);
                return;
            }

            const payload = {
                studentId: formData.studentId,
                firstName: formData.firstName,
                lastName: formData.lastName,
                phone: formData.phone,
                address: formData.address,
                dateBirth: formatDDMMYYYY(new Date(formData.dateBirth)),
                parentPhone: formData.parentPhone,
                groupIds: formData.selectedGroupIds,
                status: formData.status,
                hasFamilyMembers: formData.hasFamilyMembers,
                discount: formData.discountPercentage
                    ? parseInt(formData.discountPercentage, 10)
                    : undefined,
                whichSchool: formData.whichSchool || undefined,
                howFind: formData.howFind || undefined,
                ball: formData.ball ? parseInt(formData.ball, 10) : undefined,
                whenCome: formData.whenCome
                    ? formatDDMMYYYY(new Date(formData.whenCome))
                    : undefined,
                firstPaymentNote: formData.firstPaymentNote || undefined,
                whyStop: formData.whyStop || undefined,
            };

            try {
                const endpoint = isEditing
                    ? `/students/${initialData.id}`
                    : "/students";
                const method = isEditing ? "PATCH" : "POST";
                const result = await apiRequest(
                    endpoint,
                    method,
                    payload,
                    token
                );
                onFormSubmit(result);
                showToast?.(
                    isEditing
                        ? "Talaba muvaffaqiyatli yangilandi!"
                        : "Talaba muvaffaqiyatli qo'shildi!",
                    "success",
                    4000,
                    "top-right"
                );
            } catch (err) {
                const defaultErrorMsg = isEditing
                    ? "Talabani yangilab bo'lmadi."
                    : "Talaba qo'shib bo'lmadi.";
                const apiError = err.originalError?.response?.data;
                let errorMessage = defaultErrorMsg;
                if (apiError?.message) {
                    errorMessage = Array.isArray(apiError.message)
                        ? apiError.message.join(", ")
                        : apiError.message;
                } else if (err.message) {
                    errorMessage = err.message;
                }
                setFormError(errorMessage);
                showToast?.(errorMessage, "error", 5000, "top-right");
                console.error(
                    "Student Form submission error:",
                    err.originalError || err
                );
            } finally {
                setLoading(false);
            }
        },
        [
            formData,
            isEditing,
            initialData,
            token,
            onFormSubmit,
            showToast,
            isIdAutoGenerated,
        ]
    );

    const groupsNotReady = !groups || groups.length === 0;
    const getGroupDisplayName = (groupId) => {
        const group = groups?.find((g) => g.id === groupId);
        return group?.name || group?.groupId || `ID: ${groupId}`;
    };

    const inputBaseClass =
        "block w-full px-4 py-3 border border-gray-200 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-sm transition-all duration-200 bg-white";
    const labelBaseClass =
        "block text-sm font-semibold text-gray-700 mb-2 flex items-center";
    const disabledInputClass =
        "bg-gray-50 cursor-not-allowed text-gray-400 border-gray-100";

    return (
        <form
            onSubmit={handleSubmit}
            className="space-y-8 p-6 sm:p-8 bg-gradient-to-br from-gray-50 to-gray-100 shadow-2xl rounded-2xl"
        >
            {formError && (
                <ErrorMessage
                    message={formError}
                    onClose={() => setFormError(null)}
                    type="error"
                />
            )}
            {loading && (
                <div className="flex items-center justify-center my-4 gap-2">
                    <LoadingSpinner size="small" color="indigo-600" />
                    <p className="text-sm text-indigo-600">Jo'natilmoqda...</p>
                </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-10 gap-y-6">
                {/* Left Column */}
                <div className="space-y-5">
                    <div>
                        <label htmlFor="studentId" className={labelBaseClass}>
                            <User size={18} className="mr-2 text-indigo-500" />
                            Student ID *
                        </label>
                        <input
                            type="text"
                            name="studentId"
                            id="studentId"
                            value={formData.studentId}
                            onChange={handleChange}
                            required
                            disabled={isEditing || isIdAutoGenerated}
                            className={`${inputBaseClass} ${
                                isEditing || isIdAutoGenerated
                                    ? disabledInputClass
                                    : ""
                            }`}
                        />
                    </div>
                    <div>
                        <label htmlFor="firstName" className={labelBaseClass}>
                            <User size={18} className="mr-2 text-indigo-500" />
                            Ism *
                        </label>
                        <input
                            type="text"
                            name="firstName"
                            id="firstName"
                            value={formData.firstName}
                            onChange={handleChange}
                            required
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="lastName" className={labelBaseClass}>
                            <User size={18} className="mr-2 text-indigo-500" />
                            Familiya *
                        </label>
                        <input
                            type="text"
                            name="lastName"
                            id="lastName"
                            value={formData.lastName}
                            onChange={handleChange}
                            required
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="phone" className={labelBaseClass}>
                            <Phone size={18} className="mr-2 text-indigo-500" />
                            Telefon *
                        </label>
                        <input
                            type="text"
                            name="phone"
                            id="phone"
                            value={formData.phone}
                            onChange={handleChange}
                            required
                            placeholder="+998901234567"
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="dateBirth" className={labelBaseClass}>
                            <Calendar
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Tug'ilgan sana *
                        </label>
                        <input
                            type="date"
                            name="dateBirth"
                            id="dateBirth"
                            value={formData.dateBirth}
                            onChange={handleChange}
                            required
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="address" className={labelBaseClass}>
                            <Home size={18} className="mr-2 text-indigo-500" />
                            Manzil *
                        </label>
                        <input
                            type="text"
                            name="address"
                            id="address"
                            value={formData.address}
                            onChange={handleChange}
                            required
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="whenCome" className={labelBaseClass}>
                            <Calendar
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Qachon kelgan
                        </label>
                        <input
                            type="date"
                            name="whenCome"
                            id="whenCome"
                            value={formData.whenCome}
                            onChange={handleChange}
                            className={inputBaseClass}
                        />
                        {formData.whenCome && (
                            <p className="text-xs text-gray-500 mt-1">
                                Sana: {formatDateToDDMMYYYY(formData.whenCome)}
                            </p>
                        )}
                    </div>
                    <div>
                        <label htmlFor="whichSchool" className={labelBaseClass}>
                            <School
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Qaysi maktab
                        </label>
                        <input
                            type="text"
                            name="whichSchool"
                            id="whichSchool"
                            value={formData.whichSchool}
                            onChange={handleChange}
                            className={inputBaseClass}
                            placeholder="Maktab nomi"
                        />
                    </div>
                    <div>
                        <label htmlFor="howFind" className={labelBaseClass}>
                            <Globe size={18} className="mr-2 text-indigo-500" />
                            Qanday topdi
                        </label>
                        <select
                            name="howFind"
                            id="howFind"
                            value={formData.howFind}
                            onChange={handleChange}
                            className={inputBaseClass}
                        >
                            <option value="">Tanlang...</option>
                            <option value="SOCIAL_MEDIA">
                                Ijtimoiy tarmoqlar
                            </option>
                            <option value="FRIEND_REFERRAL">
                                Do'st tavsiyasi
                            </option>
                            <option value="ADVERTISEMENT">Reklama</option>
                            <option value="OTHER">Boshqa</option>
                        </select>
                    </div>
                    <div className="flex items-center gap-3">
                        <input
                            id="hasFamilyMembers"
                            name="hasFamilyMembers"
                            type="checkbox"
                            checked={formData.hasFamilyMembers}
                            onChange={handleChange}
                            className="h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500"
                        />
                        <label
                            htmlFor="hasFamilyMembers"
                            className="text-sm font-semibold text-gray-700"
                        >
                            <CheckSquare
                                size={18}
                                className="mr-2 inline text-indigo-500"
                            />
                            Oilada boshqa o'quvchilar bor
                        </label>
                    </div>
                </div>

                {/* Right Column */}
                <div className="space-y-5">
                    <div>
                        <label htmlFor="parentPhone" className={labelBaseClass}>
                            <Phone size={18} className="mr-2 text-indigo-500" />
                            Ota-ona telefoni *
                        </label>
                        <input
                            type="text"
                            name="parentPhone"
                            id="parentPhone"
                            value={formData.parentPhone}
                            onChange={handleChange}
                            required
                            placeholder="+998901234567"
                            className={inputBaseClass}
                        />
                    </div>
                    <div>
                        <label htmlFor="ball" className={labelBaseClass}>
                            <CheckCircle
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Ball
                        </label>
                        <input
                            type="number"
                            name="ball"
                            id="ball"
                            value={formData.ball}
                            onChange={handleChange}
                            min="0"
                            className={`${inputBaseClass} [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none`}
                            placeholder="0"
                        />
                    </div>
                    <div className="relative" ref={groupDropdownRef}>
                        <label
                            htmlFor="group-selector"
                            className={labelBaseClass}
                        >
                            <User size={18} className="mr-2 text-indigo-500" />
                            Guruhlar
                        </label>
                        <button
                            type="button"
                            id="group-selector"
                            onClick={() =>
                                setIsGroupDropdownOpen(!isGroupDropdownOpen)
                            }
                            disabled={groupsNotReady || loading}
                            className={`w-full flex items-center justify-between text-left px-4 py-3 border rounded-lg shadow-sm focus:outline-none text-sm transition-all duration-200 ${
                                isGroupDropdownOpen
                                    ? "border-indigo-500 ring-2 ring-indigo-500"
                                    : "border-gray-200"
                            } ${
                                groupsNotReady || loading
                                    ? disabledInputClass
                                    : "bg-white hover:border-indigo-500"
                            }`}
                        >
                            <span className="block truncate text-sm">
                                {formData.selectedGroupIds.length === 0
                                    ? "Guruhlarni tanlang..."
                                    : formData.selectedGroupIds.length === 1
                                    ? getGroupDisplayName(
                                          formData.selectedGroupIds[0]
                                      )
                                    : `${formData.selectedGroupIds.length} ta guruh tanlandi`}
                            </span>
                            <ChevronDown
                                size={18}
                                className={`text-indigo-500 transition-transform duration-200 ${
                                    isGroupDropdownOpen ? "rotate-180" : ""
                                }`}
                            />
                        </button>
                        {isGroupDropdownOpen && !groupsNotReady && (
                            <div className="absolute z-50 mt-2 w-full bg-white shadow-2xl border border-gray-200 rounded-lg max-h-64 overflow-y-auto p-2 transition-all duration-200 ease-out">
                                {groups.map((group, index) => (
                                    <div
                                        key={getSafeKey(group.id, index)}
                                        onClick={() =>
                                            handleGroupToggle(group.id)
                                        }
                                        className={`px-4 py-2 hover:bg-indigo-50 cursor-pointer rounded-lg flex items-center transition-colors duration-200 ${
                                            formData.selectedGroupIds.includes(
                                                group.id
                                            )
                                                ? "bg-indigo-100"
                                                : ""
                                        }`}
                                    >
                                        <div
                                            className={`w-5 h-5 mr-3 rounded border-2 flex items-center justify-center transition-all duration-200 ${
                                                formData.selectedGroupIds.includes(
                                                    group.id
                                                )
                                                    ? "bg-indigo-600 border-indigo-600"
                                                    : "border-gray-300 hover:border-indigo-500"
                                            }`}
                                        >
                                            {formData.selectedGroupIds.includes(
                                                group.id
                                            ) && (
                                                <CheckCircle
                                                    size={12}
                                                    className="text-white"
                                                />
                                            )}
                                        </div>
                                        <span
                                            className={`flex-1 text-sm ${
                                                formData.selectedGroupIds.includes(
                                                    group.id
                                                )
                                                    ? "font-semibold text-indigo-700"
                                                    : "text-gray-700"
                                            }`}
                                        >
                                            {getGroupDisplayName(group.id)}
                                            {group?.coursePrice && (
                                                <span className="text-xs text-gray-400 ml-2">
                                                    (
                                                    {group.coursePrice.toLocaleString(
                                                        "uz-UZ"
                                                    )}{" "}
                                                    so'm)
                                                </span>
                                            )}
                                        </span>
                                    </div>
                                ))}
                            </div>
                        )}
                        {groupsNotReady && !isGroupDropdownOpen && (
                            <p className="text-xs text-yellow-600 mt-2 flex items-center">
                                <CheckCircle size={14} className="mr-1" />
                                Guruhlar ro'yxati yuklanmoqda...
                            </p>
                        )}
                        {formData.selectedGroupIds.length > 0 && (
                            <div className="mt-3 flex flex-wrap gap-2">
                                {formData.selectedGroupIds.map((gid, index) => (
                                    <span
                                        key={getSafeKey(gid, index)}
                                        className="inline-flex items-center px-3 py-1 rounded-lg text-sm font-medium bg-indigo-100 text-indigo-800 shadow-sm"
                                    >
                                        {getGroupDisplayName(gid)}
                                        <button
                                            type="button"
                                            onClick={() =>
                                                handleGroupToggle(gid)
                                            }
                                            className="ml-2 text-indigo-500 hover:text-indigo-700 p-1 rounded-full hover:bg-indigo-200 transition-colors duration-200"
                                            aria-label={`Remove ${getGroupDisplayName(
                                                gid
                                            )}`}
                                        >
                                            <X size={14} />
                                        </button>
                                    </span>
                                ))}
                            </div>
                        )}
                    </div>
                    <div>
                        <label
                            htmlFor="discountPercentage"
                            className={labelBaseClass}
                        >
                            <Percent
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Chegirma foizi (%)
                        </label>
                        <input
                            type="number"
                            name="discountPercentage"
                            id="discountPercentage"
                            value={formData.discountPercentage}
                            onChange={handleChange}
                            min="0"
                            max="100"
                            step="1"
                            className={`${inputBaseClass} [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none`}
                            placeholder="0-100"
                        />
                    </div>
                    {paymentDetails.groupDetails.length > 0 && (
                        <div className="p-4 bg-white rounded-lg border border-gray-200 shadow-lg">
                            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                                <FileText
                                    size={18}
                                    className="mr-2 text-indigo-500"
                                />
                                To'lov ma'lumotlari (joriy oy)
                            </h3>
                            {paymentDetails.groupDetails.map((detail) => (
                                <div
                                    key={detail.groupId}
                                    className="mb-4 p-3 bg-gray-50 rounded-lg"
                                >
                                    <p className="font-semibold text-indigo-700">
                                        {detail.groupName}
                                    </p>
                                    <div className="grid grid-cols-2 gap-2 text-sm text-gray-600 mt-2">
                                        <p>Qolgan darslar:</p>
                                        <p className="font-bold text-blue-600">
                                            {detail.lessons}
                                        </p>
                                        <p>Kurs narxi (oylik):</p>
                                        <p className="font-bold">
                                            {detail.coursePrice.toLocaleString(
                                                "uz-UZ"
                                            )}{" "}
                                            so'm
                                        </p>
                                        <p>Proporsional narx:</p>
                                        <p className="font-bold text-blue-600">
                                            {detail.proportionalPrice.toLocaleString(
                                                "uz-UZ"
                                            )}{" "}
                                            so'm
                                        </p>
                                        {detail.groupDiscountAmount > 0 && (
                                            <>
                                                <p>
                                                    Chegirma (
                                                    {
                                                        formData.discountPercentage
                                                    }
                                                    %):
                                                </p>
                                                <p className="font-bold text-red-600">
                                                    -
                                                    {detail.groupDiscountAmount.toLocaleString(
                                                        "uz-UZ"
                                                    )}{" "}
                                                    so'm
                                                </p>
                                            </>
                                        )}
                                        <p>Guruh uchun to'lov:</p>
                                        <p className="font-bold text-green-600">
                                            {detail.groupFinalPrice.toLocaleString(
                                                "uz-UZ"
                                            )}{" "}
                                            so'm
                                        </p>
                                    </div>
                                </div>
                            ))}
                            <div className="border-t border-gray-200 pt-4">
                                <div className="grid grid-cols-2 gap-2 text-sm text-gray-600">
                                    <p>Umumiy darslar:</p>
                                    <p className="font-bold text-blue-600">
                                        {paymentDetails.totalLessons}
                                    </p>
                                    <p>Umumiy to'liq narx:</p>
                                    <p className="font-bold">
                                        {paymentDetails.totalOriginalPrice.toLocaleString(
                                            "uz-UZ"
                                        )}{" "}
                                        so'm
                                    </p>
                                    <p>Umumiy proporsional:</p>
                                    <p className="font-bold text-blue-600">
                                        {paymentDetails.totalProportionalPrice.toLocaleString(
                                            "uz-UZ"
                                        )}{" "}
                                        so'm
                                    </p>
                                    {paymentDetails.discountAmount > 0 && (
                                        <>
                                            <p>Umumiy chegirma:</p>
                                            <p className="font-bold text-red-600">
                                                -
                                                {paymentDetails.discountAmount.toLocaleString(
                                                    "uz-UZ"
                                                )}{" "}
                                                so'm
                                            </p>
                                        </>
                                    )}
                                    <p>Yakuniy to'lov:</p>
                                    <p className="font-bold text-lg text-green-600">
                                        {paymentDetails.finalMonthlyPayment.toLocaleString(
                                            "uz-UZ"
                                        )}{" "}
                                        so'm
                                    </p>
                                </div>
                            </div>
                        </div>
                    )}
                    <div>
                        <label htmlFor="status" className={labelBaseClass}>
                            <CheckCircle
                                size={18}
                                className="mr-2 text-indigo-500"
                            />
                            Status
                        </label>
                        <select
                            name="status"
                            id="status"
                            value={formData.status}
                            onChange={handleChange}
                            className={inputBaseClass}
                        >
                            <option value="FAOL">Faol</option>
                            <option value="NOFAOL">Nofaol</option>
                            <option value="TUGAT">Tugatgan</option>
                        </select>
                    </div>

                    {/* Yangi qo'shilgan qism */}
                    {formData.status === "NOFAOL" && (
                        <div className="mt-5">
                            {" "}
                            {/* status select bilan oraliq uchun margin qo'shildi */}
                            <label htmlFor="whyStop" className={labelBaseClass}>
                                <User
                                    size={18}
                                    className="mr-2 text-indigo-500"
                                />
                                Nega to'xtadi? *
                            </label>
                            <input
                                type="text"
                                name="whyStop"
                                id="whyStop"
                                value={formData.whyStop}
                                onChange={handleChange}
                                required={formData.status === "NOFAOL"}
                                className={inputBaseClass}
                                placeholder="To'xtatish sababini kiriting"
                            />
                        </div>
                    )}
                </div>
            </div>

            <div className="flex justify-end space-x-4 pt-6 border-t border-gray-200">
                <button
                    type="button"
                    onClick={onCancel}
                    className="px-6 py-2 bg-gray-200 text-gray-900 rounded-lg shadow-sm hover:bg-gray-300 focus:ring-2 focus:ring-gray-400 transition-all duration-200 font-semibold text-sm"
                >
                    Bekor qilish
                </button>
                <button
                    type="submit"
                    disabled={loading}
                    className={`px-6 py-2 text-white rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-400 transition-all duration-200 min-w-[120px] flex items-center justify-center font-semibold text-sm ${
                        loading
                            ? "bg-gray-400 cursor-not-allowed"
                            : "bg-indigo-600 hover:bg-indigo-700"
                    }`}
                >
                    {loading ? (
                        <LoadingSpinner size="sm" className="text-white" />
                    ) : isEditing ? (
                        "Yangilash"
                    ) : (
                        "Qo'shish"
                    )}
                </button>
            </div>
        </form>
    );
};

export default StudentForm;
